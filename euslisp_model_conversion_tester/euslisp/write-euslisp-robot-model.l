(defun write-robot-model-yaml (fname robot)
  (send robot :init-pose)
  ;;(send robot :newcoords (make-coords))
  (send robot :move-coords (make-coords) (car (send robot :links)))
  (with-open-file
   (f fname :direction :output)
   (format f "Total:~%")
   (let ((parent-indent ""))
     (format f "~A Mass : ~A~%" parent-indent (* 1e-3 (send robot :weight)))
     (format f "~A GlobalCom : ~A~%" parent-indent (vector2str (scale 1e-3 (send (car (send robot :links)) :inverse-transform-vector (send robot :centroid)))))
     (format f "~A ComNorm : ~A~%" parent-indent (norm (scale 1e-3 (send (car (send robot :links)) :inverse-transform-vector (send robot :centroid)))))
     (format f "~A GlobalInertia : ~A~%" parent-indent (vector2str (scale 1e-9 (array-entity (send (car (send robot :links)) :get :I-til)))))
     (format f "~A InertiaNorm : ~A~%" parent-indent (norm (scale 1e-9 (array-entity (send (car (send robot :links)) :get :I-til))))))
   (format f " Joints: ")
   (dolist (l (mapcar #'cdr (remove-if-not #'(lambda (x) (derivedp (cdr x) joint)) (send robot :slots))))
     (format f "~A, " (send l :name)))
   (format f "~%")
   (format f " ActualJoints: ")
   (dolist (l (send robot :joint-list))
     (format f "~A, " (send l :name)))
   (format f "~%")
   (let ((indent " "))
     (format f "Links:~%")
     ;;(dolist (l (send robot :links))
     ;;(dolist (l (mapcar #'cdr (remove-if-not #'(lambda (x) (and (derivedp (cdr x) bodyset-link) (not (substringp "root-link" (string-downcase (car x)))))) (send robot :slots))))
     (dolist (l (append (list (car (send robot :links))) (send-all (mapcar #'cdr (remove-if-not #'(lambda (x) (derivedp (cdr x) joint)) (send robot :slots))) :child-link)))
       ;;(format f "~A~A:~%" indent (string-upcase (send l :name)))
       (format f "~A~A:~%" indent (send l :name))
       (write-mass-properties f l indent)
       (when (send l :parent-link)
         (write-global-coords f l indent)
         (write-link-properties f l indent))
       )
     (format f "Joints:~%")
     (dolist (j (mapcar #'cdr (remove-if-not #'(lambda (x) (derivedp (cdr x) joint)) (send robot :slots))))
       (format f "~A~A:~%" indent (send j :name))
       (write-joint-properties f j indent)
       )
     )
   (format f "Sensors:~%")
   (let ((indent " "))
     (dolist (s (send robot :force-sensors))
       (format f "~A~A:~%" indent (string-left-trim ":" (format nil "~A" (send s :name))))
       (write-local-coords f (send s :parent) (send s :worldcoords) indent)
       (write-global-coords f (send s :worldcoords) indent)
       ))
   ))

(defun vector2str (vec &optional (split ","))
  (let ((str ""))
    (mapcar #'(lambda (x) (setq str (format nil "~A~A~A" str x split))) (concatenate cons vec))
    (string-right-trim "," str)
    ))

(defun write-mass-properties (f l parent-indent)
  (format f "~A Mass : ~A~%" parent-indent (* 1e-3 (send l :weight)))
  (format f "~A LocalCom : ~A~%" parent-indent (vector2str (scale 1e-3 (l . acentroid))))
  (format f "~A LocalInertia : ~A~%" parent-indent (vector2str (scale 1e-9 (array-entity (send l :inertia-tensor)))))
  (format f "~A ComNorm : ~A~%" parent-indent (norm (scale 1e-3 (l . acentroid))))
  (format f "~A InertiaNorm : ~A~%" parent-indent (norm (scale 1e-9 (array-entity (send l :inertia-tensor)))))
  (format f "~A GlobalCom : ~A~%" parent-indent (vector2str (scale 1e-3 (send l :centroid))))
  (format f "~A GlobalInertia : ~A~%" parent-indent (vector2str (scale 1e-9 (array-entity (m* (m* (send l :worldrot) (send l :inertia-tensor)) (transpose (send l :worldrot)))))))
  )

(defun write-link-properties (f l parent-indent)
  (write-local-coords f (send l :parent-link) (send l :worldcoords) parent-indent)
  )

(defun write-local-coords (f parent-coords self-coords parent-indent)
  (let ((tr (send parent-coords :transformation self-coords)))
    (format f "~A LocalPos : ~A~%" parent-indent (vector2str (scale 1e-3 (send tr :worldpos))))
    (format f "~A LocalRot : ~A~%" parent-indent (vector2str (array-entity (send tr :worldrot))))
    ))

(defun write-global-coords (f gcoords parent-indent)
  (format f "~A GlobalPos : ~A~%" parent-indent (vector2str (scale 1e-3 (send gcoords :worldpos))))
  (format f "~A GlobalRot : ~A~%" parent-indent (vector2str (array-entity (send gcoords :worldrot))))
  )

(defun write-joint-properties (f j parent-indent)
  (format f "~A LowerLimit : ~A~%" parent-indent (deg2rad (send j :min-angle)))
  (format f "~A UpperLimit : ~A~%" parent-indent (deg2rad (send j :max-angle)))
  (format f "~A VelocityLimit : ~A~%" parent-indent (send j :max-joint-velocity))
  )
